{"version":3,"file":"static/js/905.a24b1179.chunk.js","mappings":"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","sources":["components/SignUp.js"],"sourcesContent":["import { Button, Grid, Paper, TextField, Typography,} from \"@mui/material\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport \"../index.css\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Box } from \"@mui/system\";\r\nimport BackgroundLogin from \"../images/photo22.jpg\";\r\n\r\n\r\nconst SignUp = () => {\r\n\r\n  const baseURL = \"http://localhost:3535/api\";\r\n  const user_name = useRef(null);\r\n  const user_email = useRef(null);\r\n  const user_password = useRef(null);\r\n  const user_phoneNumber = useRef(null);\r\n  const dateOfBirth = useRef(null);\r\n  const address = useRef(null);\r\n  const [userResult, setUserResult] = useState(null);\r\n\r\n\r\n  async function postData() {\r\n    const postData = {\r\n      name: user_name.current.value,\r\n      email: user_email.current.value,\r\n      password: user_password.current.value,\r\n      phoneNumber: user_phoneNumber.current.value,\r\n      dateOfBirth: dateOfBirth.current.value,\r\n      address: address.current.value\r\n\r\n    };\r\n    try {\r\n      const res = await fetch(`${baseURL}/signup`, {\r\n        method: \"post\",\r\n        credentials: 'include',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(postData),\r\n      });\r\n      if (!res.ok) {\r\n        const message = `An error has occured:`;\r\n        throw new Error(message);\r\n      }\r\n      const result = <Typography variant=\"h7\" sx={{color:\"#cd7700\", fontFamily: 'Roboto'}}>WELCOME ON BOARD! PLEASE, LOGIN!</Typography>;\r\n      setUserResult(result);\r\n    } catch (err) {\r\n      setUserResult(err.message);\r\n    }\r\n  }\r\n\r\n  const validationSchema = yup.object({\r\n  name: yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(20, 'Too Long!')\r\n    .required('Required'),\r\n  email: yup.string()\r\n    .email('Not valid e-mail')\r\n    .required('Required'),\r\n  password: yup\r\n    .string('Enter your password')\r\n    .min(8, 'Password should be of minimum 8 characters length')\r\n    .required('Password is required'),\r\n  phoneNumber: yup\r\n    .string('Enter your phone number')\r\n    .min(10, 'Not valid phone number')\r\n    .matches(\r\n      /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/, 'Not valid phone number')\r\n    .required('Phone number is required'),\r\n  address: yup.string()\r\n    .min(10, 'Too Short!')\r\n    .max(30, 'Too Long!')\r\n    .required('Required'),\r\n});\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      phoneNumber: '',\r\n      dateOfBirth: '',\r\n      address: ''\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      postData(values);\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Grid container \r\n    justifyContent=\"center\"\r\n    spacing={2}\r\n    sx={{\r\n      backgroundImage: `url(${BackgroundLogin})`,\r\n      backgroundSize: \"cover\",\r\n      backgroundRepeat: \"no-repeat\",\r\n    }} >\r\n      <Grid item xs={12} md={8} display=\"flex\" alignitems=\"stretch \" >\r\n        <Paper\r\n          sx={{\r\n            \"& .MuiTextField-root\": { m: 1, width: \"80%\" },\r\n          }}\r\n          autoComplete=\"off\"\r\n          elevation={4}\r\n        >\r\n          <Typography variant=\"h6\" mt={2} sx={{ fontFamily: 'Roboto' }} >JOIN US NOW</Typography>\r\n\r\n          <form onSubmit={(e) => { e.preventDefault(); formik.handleSubmit(e)}} >\r\n          {userResult && (\r\n            <Typography>\r\n              <pre>{userResult}</pre>\r\n            </Typography>\r\n          )}\r\n            <TextField\r\n              id=\"name\"\r\n              label=\"Name and Surname\"\r\n              name=\"name\"\r\n              variant=\"standard\"\r\n              inputRef={user_name}\r\n              value={formik.values.name}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.name && Boolean(formik.errors.name)}\r\n              helperText={formik.touched.name && formik.errors.name}\r\n            />\r\n            <TextField\r\n              id=\"email\"\r\n              label=\"Email\"\r\n              variant=\"standard\"\r\n              name=\"email\"\r\n              inputRef={user_email}\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.email && Boolean(formik.errors.email)}\r\n              helperText={formik.touched.email && formik.errors.email}\r\n            />\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              variant=\"standard\"\r\n              inputRef={user_password}\r\n              value={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              error={formik.touched.password && Boolean(formik.errors.password)}\r\n              helperText={formik.touched.password && formik.errors.password}\r\n            />\r\n            <TextField\r\n              id=\"phoneNumber\"\r\n              label=\"Phone Number\"\r\n              variant=\"standard\"\r\n              onChange={formik.handleChange}\r\n              inputRef={user_phoneNumber}\r\n              value={formik.values.phoneNumber}\r\n              error={formik.touched.phoneNumber && Boolean(formik.errors.phoneNumber)}\r\n              helperText={formik.touched.phoneNumber && formik.errors.phoneNumber}\r\n            />\r\n             <TextField\r\n              id=\"address\"\r\n              label=\"Your address\"\r\n              variant=\"standard\"\r\n              onChange={formik.handleChange}\r\n              inputRef={address}\r\n              value={formik.values.address}\r\n              error={formik.touched.address && Boolean(formik.errors.address)}\r\n              helperText={formik.touched.address && formik.errors.address}\r\n            />\r\n            <TextField\r\n            label=\"Date of birth\"\r\n            variant=\"standard\"\r\n            type=\"date\"\r\n            defaultValue=\"2004-04-01\"\r\n            inputProps={{max: \"2004-04-01\"}}\r\n            inputRef={dateOfBirth}\r\n            />\r\n            <Box>\r\n            <Button \r\n              sx={{ mb: 3, mt: 5, color: \"#273649\", borderColor: \"#273649\"}}\r\n              variant=\"outlined\" \r\n              type=\"submit\"\r\n              >Sign Up</Button>\r\n            </Box>\r\n            <Typography sx={{padding:\"10px\"}}>If you are register user, please <Link to=\"/login\" className=\"myLink-content\" >Login</Link>.</Typography>\r\n\r\n          </form>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n\r\n"],"names":["baseURL","user_name","useRef","user_email","user_password","user_phoneNumber","dateOfBirth","address","useState","userResult","setUserResult","postData","name","current","value","email","password","phoneNumber","fetch","method","credentials","headers","body","JSON","stringify","ok","Error","result","variant","sx","color","fontFamily","message","validationSchema","yup","min","max","required","matches","formik","useFormik","initialValues","onSubmit","values","resetForm","container","justifyContent","spacing","backgroundImage","BackgroundLogin","backgroundSize","backgroundRepeat","item","xs","md","display","alignitems","m","width","autoComplete","elevation","mt","e","preventDefault","handleSubmit","id","label","inputRef","onChange","handleChange","error","touched","Boolean","errors","helperText","type","defaultValue","inputProps","mb","borderColor","padding","to","className"],"sourceRoot":""}